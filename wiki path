// JavaScript code (server.js)

const express = require('express');
const axios = require('axios');
const fs = require('fs').promises; // Using promises-based file system module

const app = express();
const PORT = process.env.PORT || 3000;

// Function to fetch data from Wikipedia
async function fetchData() {
    try {
        const response = await axios.get('https://en.wikipedia.org/wiki/Main_Page');
        // Process the fetched data
        const processedData = await processWikipediaData(response.data);

        // Save processed data to a file
        await saveProcessedData(processedData);

        console.log("Data fetched, processed, and saved successfully!");
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}

// Function to process Wikipedia data
async function processWikipediaData(data) {
    try {
        const [sections, metadata] = await Promise.all([
            extractSections(data),
            extractMetadata(data)
        ]);
        const processedData = {
            sections,
            metadata
        };
        return processedData;
    } catch (error) {
        throw new Error("Error processing Wikipedia data: " + error.message);
    }
}

// Function to extract sections from Wikipedia data
async function extractSections(data) {
    try {
        const sectionIds = ['mp-upper', 'mp-tfa', 'mp-itn']; // IDs of sections to extract
        const sectionPromises = sectionIds.map(sectionId => extractSection(data, sectionId));
        const sections = await Promise.all(sectionPromises);
        return Object.fromEntries(sections);
    } catch (error) {
        throw new Error("Error extracting sections: " + error.message);
    }
}

// Function to extract a specific section from Wikipedia data
async function extractSection(data, sectionId) {
    try {
        const startTag = `<div id="${sectionId}">`;
        const endTag = '<!-- /section -->';
        const startIndex = data.indexOf(startTag);
        const endIndex = data.indexOf(endTag, startIndex);
        if (startIndex !== -1 && endIndex !== -1) {
            const sectionContent = data.substring(startIndex + startTag.length, endIndex);
            return [sectionId, sectionContent.trim()]; // Return section ID and content
        } else {
            throw new Error(`Section ${sectionId} not found`);
        }
    } catch (error) {
        throw new Error("Error extracting section " + sectionId + ": " + error.message);
    }
}

// Function to extract metadata from Wikipedia data
async function extractMetadata(data) {
    try {
        // Simulate extraction of metadata
        const titleStart = data.indexOf('<title>') + '<title>'.length;
        const titleEnd = data.indexOf('</title>', titleStart);
        const pageTitle = data.substring(titleStart, titleEnd);

        return { pageTitle };
    } catch (error) {
        throw new Error("Error extracting metadata: " + error.message);
    }
}

// Function to save processed data to a file
async function saveProcessedData(processedData) {
    try {
        await fs.writeFile('processedData.json', JSON.stringify(processedData, null, 2));
    } catch (error) {
        throw new Error("Error saving processed data: " + error.message);
    }
}

// Endpoint to retrieve processed data
app.get('/processedData', async (req, res) => {
    try {
        const data = await fs.readFile('processedData.json', 'utf8');
        res.json(JSON.parse(data));
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    // Run fetchData function in the background
    fetchData();
});
